name: 'Terraform'

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'lambda_function.py'
      - 'lambda_function_payload.zip'
  pull_request:

permissions:
  id-token: write
  contents: read

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    #Validate infrastructure deployment
    - name: Validate region variable deployment
      run:  |
        var_region_1=$(grep "region" ./variables.tf | awk '{print $3}')
        var_region_2=$(grep "region" ./iam/variables.tf | awk '{print $3}')
        if [[ "$var_region_1" != "$var_region_2" ]]; then
          echo "Please ensure the region variable in each module is identical."
          exit 1
        fi

        echo "Region variables matching"

    - name: Validate bucket name deployment
      run:  |
        var1_input_bucket=$(grep "input_bucket" ./variables.tf | awk -F '=' '{print $3}')
        pattern="f\"project-stocks-vxmm-(.*?)\""
        extracted_bucket_name=$(grep "$pattern" ./lambda_function.py | awk -F '"' '{print $2}')
        var2_input_bucket=$(grep "bucket_name" ./lambda_function.py | awk '{print $3}')
        if [[ "$var1_input_bucket" != "project-stocks-vxmm-"$extracted_bucket_name ]]; then
           echo "Please ensure the input bucket name in the code module matches the infrastructure deployment variable."
           echo "Expected format: project-stocks-vxmm-<region>"
          exit 1
        fi

        echo "Bucket names matching"

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"


    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false