name: Infrastructure Release (Terraform)

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'lambda_function.py'
      - 'lambda_function_payload.zip'
  pull_request:

permissions:
  id-token: write
  contents: read

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate region variable deployment
      run:  |
        var_region_1=$(grep "region" ./variables.tf | awk '{print $3}')
        var_region_2=$(grep "region" ./iam/variables.tf | awk '{print $3}')
        if [[ "$var_region_1" != "$var_region_2" ]]; then
          echo "Please ensure the region variable in each module is identical."
          exit 1
        fi

        echo "Region variables matching"

    - name: Validate bucket name deployment
      run:  |
        var1_input_bucket=$(grep "input_bucket" ./variables.tf | awk -F '=' '{print $3}' | tr -d ' "')
        current_region=$(grep "default" ./variables.tf | grep region | awk -F '=' '{print $3}' | tr -d ' "')
    
    
        expected_bucket_name="project-stocks-vxmm-${current_region}"

        if [[ "$var1_input_bucket" != "project-stocks-vxmm" ]]; then
           echo "Please ensure the input bucket name in the code module matches the infrastructure deployment variable."
           echo "Expected format: project-stocks-vxmm"
        exit 1
        fi

        if [[ "$expected_bucket_name" != "project-stocks-vxmm-${current_region}" ]]; then
          echo "Please ensure the input bucket name in the Python module matches the correct format."
          echo "Expected format: project-stocks-vxmm-${current_region}"
          exit 1
        fi

        echo "Bucket names matching"

    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false